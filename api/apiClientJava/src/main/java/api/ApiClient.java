/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package api;


import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.bytedeco.javacpp.FunctionPointer;
import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.annotation.Name;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Platform;
import org.bytedeco.javacpp.annotation.StdString;
import java.util.Map;

@Platform
@Namespace("std")
public class ApiClient {


    static {
            System.out.println("loading");
        Loader.load();
    }



    public static class Client extends FunctionPointer {


        private static ObjectMapper objectMapper = new ObjectMapper();

        static {
            Loader.load();
            objectMapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);
            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
             }
        protected Client() { allocate(); }

        private native void allocate();

        public @Name("call") String call(@StdString String inputPropertiesData) throws Exception {
            InputProperties inputProperties = objectMapper.readValue(inputPropertiesData, InputProperties.class);
            if(inputProperties.getNodeClass() == null) {
                throw new RuntimeException("nodeClass not specified");
            }
            DependencyNode dependencyNode = (DependencyNode)Class.forName(inputProperties.getNodeClass()).newInstance();
            Object data = dependencyNode.process(inputProperties);
            return objectMapper.writeValueAsString(data);
        }

    };

}

